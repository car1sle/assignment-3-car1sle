{"ast":null,"code":"var _jsxFileName = \"/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport Counter from '../generic/Counter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Countdown = _ref => {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  const {\n    time,\n    timers,\n    removeTimer\n  } = useContext(AppContext);\n  const {\n    index,\n    workoutDuration\n  } = props; // Calculate total time of all timers before this one\n\n  const timeBeforeMe = timers.reduce((acc, curr, i) => {\n    debugger;\n\n    if (i < index) {\n      return curr.workoutDuration + acc;\n    } else {\n      return acc;\n    }\n  }, 0);\n  console.log('index: ' + index);\n  console.log('workoutDuration: ' + workoutDuration);\n  console.log('time: ' + time);\n  console.log('timeBeforeMe: ' + timeBeforeMe);\n  console.log('timers: ' + JSON.stringify(timers)); // This timer is active if the current time is between \n  // the sum of all previous and the duration of this one\n  // const active = time >= timeBeforeMe && time < timeBeforeMe + workoutDuration;\n  // useEffect(() => {\n  //     let i;\n  //     if (workoutIsRunning && currentTimerId === id) {\n  //         i = setInterval(() => {\n  //             setTime(time - 1);\n  //         }, 1000);\n  //         if (time === 0) {\n  //             clearInterval(i);\n  //             if (id === timers.length) {\n  //                 setWorkoutIsRunning(false);\n  //                 setWorkoutIsComplete(true);\n  //             } else {\n  //                 setCurrentTimerId(currentTimerId + 1);\n  //             }\n  //         }\n  //     }\n  //     return () => clearInterval(i);\n  // }, [time, workoutIsRunning, currentTimerId, id, setCurrentTimerId, setWorkoutIsComplete, setWorkoutIsRunning, timers]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Counter, {\n      children: translateFromSeconds(workoutDuration)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Countdown, \"ouv4O0HjehuB86uBRjfbu6GR010=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["useEffect","useState","useContext","AppContext","translateFromSeconds","Counter","Countdown","props","time","timers","removeTimer","index","workoutDuration","timeBeforeMe","reduce","acc","curr","i","console","log","JSON","stringify"],"sources":["/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js"],"sourcesContent":["import { useEffect, useState, useContext } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport Counter from '../generic/Counter';\n\nconst Countdown = ({ props }) => {\n\n    const { time, timers, removeTimer } = useContext(AppContext);\n    const { index, workoutDuration } = props;\n\n    // Calculate total time of all timers before this one\n    const timeBeforeMe = timers.reduce((acc, curr, i) => {\n        debugger;\n        if (i < index) {\n            return curr.workoutDuration + acc;\n        } else {\n            return acc;\n        }\n    }, 0);\n\n    console.log('index: ' + index);\n    console.log('workoutDuration: ' + workoutDuration);\n    console.log('time: ' + time);\n    console.log('timeBeforeMe: ' + timeBeforeMe);\n    console.log('timers: ' + JSON.stringify(timers));\n\n    // This timer is active if the current time is between \n    // the sum of all previous and the duration of this one\n    // const active = time >= timeBeforeMe && time < timeBeforeMe + workoutDuration;\n\n    // useEffect(() => {\n\n    //     let i;\n\n    //     if (workoutIsRunning && currentTimerId === id) {\n    //         i = setInterval(() => {\n    //             setTime(time - 1);\n    //         }, 1000);\n    //         if (time === 0) {\n    //             clearInterval(i);\n    //             if (id === timers.length) {\n    //                 setWorkoutIsRunning(false);\n    //                 setWorkoutIsComplete(true);\n    //             } else {\n    //                 setCurrentTimerId(currentTimerId + 1);\n    //             }\n    //         }\n    //     }\n\n    //     return () => clearInterval(i);\n\n    // }, [time, workoutIsRunning, currentTimerId, id, setCurrentTimerId, setWorkoutIsComplete, setWorkoutIsRunning, timers]);\n\n    return (\n        <>\n            <Counter>{translateFromSeconds(workoutDuration)}</Counter>\n        </>\n    );\n\n};\n\nexport default Countdown;"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;;AAEA,MAAMC,SAAS,GAAG,QAAe;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAE7B,MAAM;IAAEC,IAAF;IAAQC,MAAR;IAAgBC;EAAhB,IAAgCR,UAAU,CAACC,UAAD,CAAhD;EACA,MAAM;IAAEQ,KAAF;IAASC;EAAT,IAA6BL,KAAnC,CAH6B,CAK7B;;EACA,MAAMM,YAAY,GAAGJ,MAAM,CAACK,MAAP,CAAc,CAACC,GAAD,EAAMC,IAAN,EAAYC,CAAZ,KAAkB;IACjD;;IACA,IAAIA,CAAC,GAAGN,KAAR,EAAe;MACX,OAAOK,IAAI,CAACJ,eAAL,GAAuBG,GAA9B;IACH,CAFD,MAEO;MACH,OAAOA,GAAP;IACH;EACJ,CAPoB,EAOlB,CAPkB,CAArB;EASAG,OAAO,CAACC,GAAR,CAAY,YAAYR,KAAxB;EACAO,OAAO,CAACC,GAAR,CAAY,sBAAsBP,eAAlC;EACAM,OAAO,CAACC,GAAR,CAAY,WAAWX,IAAvB;EACAU,OAAO,CAACC,GAAR,CAAY,mBAAmBN,YAA/B;EACAK,OAAO,CAACC,GAAR,CAAY,aAAaC,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAAzB,EAnB6B,CAqB7B;EACA;EACA;EAEA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;;EAEA,oBACI;IAAA,uBACI,QAAC,OAAD;MAAA,UAAUL,oBAAoB,CAACQ,eAAD;IAA9B;MAAA;MAAA;MAAA;IAAA;EADJ,iBADJ;AAMH,CAtDD;;GAAMN,S;;KAAAA,S;AAwDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}