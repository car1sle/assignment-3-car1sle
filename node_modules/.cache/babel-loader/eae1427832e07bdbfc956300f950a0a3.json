{"ast":null,"code":"var _jsxFileName = \"/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds, translateToSeconds } from '../../utils/helpers'; // const usePrevious = value => {\n//     const previous = useRef(0);\n//     useEffect(() => {\n//       previous.current = value;\n//     }, [value]);\n//     return previous.current;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  id,\n  inputHours,\n  inputMinutes,\n  inputSeconds\n} = props;\n\nconst Countdown = _ref => {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  const {\n    timers,\n    workoutIsRunning,\n    currentTimerId,\n    setCurrentTimerId,\n    setWorkoutIsComplete\n  } = useContext(AppContext);\n  const [time, setTime] = useState(translateToSeconds(inputHours, inputMinutes, inputSeconds));\n  const [isRunning, setIsRunning] = useState(workoutIsRunning); // const prevTime = usePrevious(time);\n\n  useEffect(() => {\n    let i;\n\n    if (isRunning && currentTimerId === id) {\n      i = setInterval(() => {\n        setTime(time - 1);\n      }, 1000);\n\n      if (time === 0) {\n        clearInterval(i);\n        setIsRunning(false);\n\n        if (id < timers.length) {\n          setCurrentTimerId(currentTimerId + 1);\n        }\n      }\n    }\n\n    return () => {\n      clearInterval(i);\n\n      if (id === timers.length) {\n        setWorkoutIsComplete(true);\n      }\n    };\n  }, [time, isRunning, currentTimerId, id, setCurrentTimerId, timers, setWorkoutIsComplete]);\n  const displayTime = id < currentTimerId ? '00:00:00' : translateFromSeconds(time);\n  return /*#__PURE__*/_jsxDEV(Counter, {\n    children: displayTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Countdown, \"tjfHlRqTyfg7R3t4G4/yFt5WbxA=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["useEffect","useState","useContext","useRef","AppContext","Counter","translateFromSeconds","translateToSeconds","id","inputHours","inputMinutes","inputSeconds","props","Countdown","timers","workoutIsRunning","currentTimerId","setCurrentTimerId","setWorkoutIsComplete","time","setTime","isRunning","setIsRunning","i","setInterval","clearInterval","length","displayTime"],"sources":["/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js"],"sourcesContent":["import { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds, translateToSeconds } from '../../utils/helpers';\n\n// const usePrevious = value => {\n//     const previous = useRef(0);\n  \n//     useEffect(() => {\n//       previous.current = value;\n//     }, [value]);\n  \n//     return previous.current;\n// };\n\n\n    const { id, inputHours, inputMinutes, inputSeconds } = props;\n\n\nconst Countdown = ({props}) => {\n\n    const { timers, workoutIsRunning, currentTimerId, setCurrentTimerId, setWorkoutIsComplete } = useContext(AppContext);\n\n    const [time, setTime] = useState(translateToSeconds(inputHours, inputMinutes, inputSeconds));\n    const [isRunning, setIsRunning] = useState(workoutIsRunning);\n\n    // const prevTime = usePrevious(time);\n\n    useEffect(() => {\n\n        let i;\n\n        if (isRunning && currentTimerId === id) {\n            i = setInterval(() => {\n                setTime(time - 1);\n            }, 1000);\n            if (time === 0) {\n                clearInterval(i);\n                setIsRunning(false);\n                if (id < timers.length) {\n                    setCurrentTimerId(currentTimerId + 1);\n                }\n            }\n        }\n\n        return () => {\n            clearInterval(i);\n            if (id === timers.length) {\n                setWorkoutIsComplete(true);\n            }\n        }\n\n    }, [time, isRunning, currentTimerId, id, setCurrentTimerId, timers, setWorkoutIsComplete]);\n\n    const displayTime = (id < currentTimerId) ? '00:00:00' : translateFromSeconds(time);\n\n    return (\n\n        <Counter>{displayTime}</Counter>\n    );\n\n};\n\nexport default Countdown;"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,qBAAzD,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAGI,MAAM;EAAEC,EAAF;EAAMC,UAAN;EAAkBC,YAAlB;EAAgCC;AAAhC,IAAiDC,KAAvD;;AAGJ,MAAMC,SAAS,GAAG,QAAa;EAAA;;EAAA,IAAZ;IAACD;EAAD,CAAY;EAE3B,MAAM;IAAEE,MAAF;IAAUC,gBAAV;IAA4BC,cAA5B;IAA4CC,iBAA5C;IAA+DC;EAA/D,IAAwFhB,UAAU,CAACE,UAAD,CAAxG;EAEA,MAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACM,kBAAkB,CAACE,UAAD,EAAaC,YAAb,EAA2BC,YAA3B,CAAnB,CAAhC;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAACc,gBAAD,CAA1C,CAL2B,CAO3B;;EAEAf,SAAS,CAAC,MAAM;IAEZ,IAAIuB,CAAJ;;IAEA,IAAIF,SAAS,IAAIL,cAAc,KAAKR,EAApC,EAAwC;MACpCe,CAAC,GAAGC,WAAW,CAAC,MAAM;QAClBJ,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;MACH,CAFc,EAEZ,IAFY,CAAf;;MAGA,IAAIA,IAAI,KAAK,CAAb,EAAgB;QACZM,aAAa,CAACF,CAAD,CAAb;QACAD,YAAY,CAAC,KAAD,CAAZ;;QACA,IAAId,EAAE,GAAGM,MAAM,CAACY,MAAhB,EAAwB;UACpBT,iBAAiB,CAACD,cAAc,GAAG,CAAlB,CAAjB;QACH;MACJ;IACJ;;IAED,OAAO,MAAM;MACTS,aAAa,CAACF,CAAD,CAAb;;MACA,IAAIf,EAAE,KAAKM,MAAM,CAACY,MAAlB,EAA0B;QACtBR,oBAAoB,CAAC,IAAD,CAApB;MACH;IACJ,CALD;EAOH,CAxBQ,EAwBN,CAACC,IAAD,EAAOE,SAAP,EAAkBL,cAAlB,EAAkCR,EAAlC,EAAsCS,iBAAtC,EAAyDH,MAAzD,EAAiEI,oBAAjE,CAxBM,CAAT;EA0BA,MAAMS,WAAW,GAAInB,EAAE,GAAGQ,cAAN,GAAwB,UAAxB,GAAqCV,oBAAoB,CAACa,IAAD,CAA7E;EAEA,oBAEI,QAAC,OAAD;IAAA,UAAUQ;EAAV;IAAA;IAAA;IAAA;EAAA,QAFJ;AAKH,CA1CD;;GAAMd,S;;KAAAA,S;AA4CN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}