{"ast":null,"code":"var _jsxFileName = \"/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport { useTimeSetter } from '../../utils/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countdown = props => {\n  _s();\n\n  // const { setcurrentTimerId, isRunningMain } = useContext(AppContext);\n  const {\n    inputHours,\n    inputMinutes,\n    inputSeconds\n  } = props; // const [isRunning, setIsRunning] = useState(false);\n  // const [isComplete, setIsComplete] = useState(true);\n\n  const [time, setTime] = useState(0);\n  const [inputTime, setInputTime] = useState(0);\n  useTimeSetter(setInputTime, inputHours, inputMinutes, inputSeconds);\n  useTimeSetter(setTime, inputHours, inputMinutes, inputSeconds); // const handleClick = value => {\n  //     switch(value) {\n  //         case 'Start':\n  //             setIsRunning(true);\n  //             setIsComplete(false);\n  //             break;\n  //         case 'Pause':\n  //             setIsRunning(false);\n  //             break;\n  //         case 'Resume':\n  //             setIsRunning(true);\n  //             break;\n  //         case 'Fast Forward':\n  //             setTime(0);\n  //             setIsComplete(true);\n  //             break;\n  //         case 'Reset':\n  //             setTime(inputTime);\n  //             setIsComplete(true);\n  //             setIsRunning(false);\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // }\n  // const makeButton = ({value, disabledValue}) => {\n  //     return <Button value={value} disabledValue={inputTime ? disabledValue : true} onClick={handleClick} />\n  // };\n  // useEffect(() => {\n  //     let i;\n  //     if (isRunning) {\n  //         i = setInterval(() => {\n  //             setTime(time - 1);\n  //         }, 1000);\n  //         if (time === 0) {\n  //             clearInterval(i);\n  //             setIsRunning(false);\n  //         }\n  //     }\n  //     return () => clearInterval(i);\n  // }, [time, inputTime, isRunning]);\n\n  return /*#__PURE__*/_jsxDEV(Counter, {\n    children: translateFromSeconds(time)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this); // return (\n  //     <div style={{ margin: \"10px 0 20px\", display: \"flex\",}}>\n  //         {makeButton({\n  //             value: \"Start\",\n  //             disabledValue: !isComplete || (time !== inputTime)\n  //         })}\n  //         {makeButton({\n  //             value: \"Pause\",\n  //             disabledValue: !isRunning\n  //         })}\n  //         {makeButton({\n  //             value: \"Resume\",\n  //             disabledValue: isRunning || isComplete || (time === 0)\n  //         })}\n  //         {makeButton({\n  //             value: \"Fast Forward\",\n  //             disabledValue: isComplete || (time === 0)\n  //         })}\n  //         {makeButton({\n  //             value: \"Reset\",\n  //             disabledValue: isComplete && (time === inputTime)\n  //         })}\n  //     </div>\n  // );\n};\n\n_s(Countdown, \"LhoBNCBu1YVPwFgJrSS5chIJOYY=\", false, function () {\n  return [useTimeSetter, useTimeSetter];\n});\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["useEffect","useState","useContext","AppContext","Counter","translateFromSeconds","useTimeSetter","Countdown","props","inputHours","inputMinutes","inputSeconds","time","setTime","inputTime","setInputTime"],"sources":["/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js"],"sourcesContent":["import { useEffect, useState, useContext } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport { useTimeSetter } from '../../utils/hooks';\n\nconst Countdown = props => {\n\n    // const { setcurrentTimerId, isRunningMain } = useContext(AppContext);\n    const { inputHours, inputMinutes, inputSeconds } = props;\n\n    // const [isRunning, setIsRunning] = useState(false);\n    // const [isComplete, setIsComplete] = useState(true);\n    const [time, setTime] = useState(0);\n    const [inputTime, setInputTime] = useState(0);\n\n    useTimeSetter(setInputTime, inputHours, inputMinutes, inputSeconds);\n    useTimeSetter(setTime, inputHours, inputMinutes, inputSeconds);\n\n    // const handleClick = value => {\n    //     switch(value) {\n    //         case 'Start':\n    //             setIsRunning(true);\n    //             setIsComplete(false);\n    //             break;\n    //         case 'Pause':\n    //             setIsRunning(false);\n    //             break;\n    //         case 'Resume':\n    //             setIsRunning(true);\n    //             break;\n    //         case 'Fast Forward':\n    //             setTime(0);\n    //             setIsComplete(true);\n    //             break;\n    //         case 'Reset':\n    //             setTime(inputTime);\n    //             setIsComplete(true);\n    //             setIsRunning(false);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }\n\n    // const makeButton = ({value, disabledValue}) => {\n    //     return <Button value={value} disabledValue={inputTime ? disabledValue : true} onClick={handleClick} />\n    // };\n\n    // useEffect(() => {\n\n    //     let i;\n\n    //     if (isRunning) {\n    //         i = setInterval(() => {\n    //             setTime(time - 1);\n    //         }, 1000);\n    //         if (time === 0) {\n    //             clearInterval(i);\n    //             setIsRunning(false);\n    //         }\n    //     }\n\n    //     return () => clearInterval(i);\n\n    // }, [time, inputTime, isRunning]);\n\n    return (\n        <Counter>{translateFromSeconds(time)}</Counter>\n    );\n\n    // return (\n    //     <div style={{ margin: \"10px 0 20px\", display: \"flex\",}}>\n    //         {makeButton({\n    //             value: \"Start\",\n    //             disabledValue: !isComplete || (time !== inputTime)\n    //         })}\n    //         {makeButton({\n    //             value: \"Pause\",\n    //             disabledValue: !isRunning\n    //         })}\n    //         {makeButton({\n    //             value: \"Resume\",\n    //             disabledValue: isRunning || isComplete || (time === 0)\n    //         })}\n    //         {makeButton({\n    //             value: \"Fast Forward\",\n    //             disabledValue: isComplete || (time === 0)\n    //         })}\n    //         {makeButton({\n    //             value: \"Reset\",\n    //             disabledValue: isComplete && (time === inputTime)\n    //         })}\n    //     </div>\n    // );\n};\n\nexport default Countdown;"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,aAAT,QAA8B,mBAA9B;;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;EAAA;;EAEvB;EACA,MAAM;IAAEC,UAAF;IAAcC,YAAd;IAA4BC;EAA5B,IAA6CH,KAAnD,CAHuB,CAKvB;EACA;;EACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;EACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C;EAEAK,aAAa,CAACS,YAAD,EAAeN,UAAf,EAA2BC,YAA3B,EAAyCC,YAAzC,CAAb;EACAL,aAAa,CAACO,OAAD,EAAUJ,UAAV,EAAsBC,YAAtB,EAAoCC,YAApC,CAAb,CAXuB,CAavB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;;EAEA,oBACI,QAAC,OAAD;IAAA,UAAUN,oBAAoB,CAACO,IAAD;EAA9B;IAAA;IAAA;IAAA;EAAA,QADJ,CA7DuB,CAiEvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACH,CAzFD;;GAAML,S;UAUFD,a,EACAA,a;;;KAXEC,S;AA2FN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}