{"ast":null,"code":"var _jsxFileName = \"/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Input from '../generic/Input';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport { useTimeSetter } from '../../utils/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countdown = props => {\n  _s();\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [isComplete, setIsComplete] = useState(true);\n  const [time, setTime] = useState(0);\n  const [inputHours, setInputHours] = useState(0);\n  const [inputMinutes, setInputMinutes] = useState(0);\n  const [inputSeconds, setInputSeconds] = useState(0);\n  const [inputTime, setInputTime] = useState(0);\n\n  const handleClick = value => {\n    switch (value) {\n      case 'Start':\n        setIsRunning(true);\n        setIsComplete(false);\n        break;\n\n      case 'Pause':\n        setIsRunning(false);\n        break;\n\n      case 'Resume':\n        setIsRunning(true);\n        break;\n\n      case 'Fast Forward':\n        setTime(0);\n        setIsComplete(true);\n        break;\n\n      case 'Reset':\n        setTime(inputTime);\n        setIsComplete(true);\n        setIsRunning(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const makeInput = _ref => {\n    let {\n      state,\n      setter,\n      relatedSetter,\n      label\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(Input, {\n      label: label,\n      value: state,\n      onChange: e => {\n        if (e.target.value) {\n          setter(parseInt(e.target.value));\n          relatedSetter && relatedSetter(parseInt(e.target.value));\n        } else {\n          setter(0);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }; // const makeButton = ({value, disabledValue}) => {\n  //     return <Button value={value} disabledValue={inputTime ? disabledValue : true} onClick={handleClick} />\n  // };\n\n\n  useTimeSetter(setInputTime, inputHours, inputMinutes, inputSeconds);\n  useTimeSetter(setTime, inputHours, inputMinutes, inputSeconds);\n  useEffect(() => {\n    let i;\n\n    if (isRunning) {\n      i = setInterval(() => {\n        setTime(time - 1);\n      }, 1000);\n\n      if (time === 0) {\n        clearInterval(i);\n        setIsRunning(false);\n      }\n    }\n\n    return () => clearInterval(i);\n  }, [time, inputTime, isRunning]);\n  return /*#__PURE__*/_jsxDEV(Counter, {\n    children: translateFromSeconds(time)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this); // return (\n  //     <div style={{ margin: \"10px 0 20px\", display: \"flex\",}}>\n  //         {makeButton({\n  //             value: \"Start\",\n  //             disabledValue: !isComplete || (time !== inputTime)\n  //         })}\n  //         {makeButton({\n  //             value: \"Pause\",\n  //             disabledValue: !isRunning\n  //         })}\n  //         {makeButton({\n  //             value: \"Resume\",\n  //             disabledValue: isRunning || isComplete || (time === 0)\n  //         })}\n  //         {makeButton({\n  //             value: \"Fast Forward\",\n  //             disabledValue: isComplete || (time === 0)\n  //         })}\n  //         {makeButton({\n  //             value: \"Reset\",\n  //             disabledValue: isComplete && (time === inputTime)\n  //         })}\n  //     </div>\n  // );\n};\n\n_s(Countdown, \"y3c7zq7LX2bUOHcXtSU4G8g4gkQ=\", false, function () {\n  return [useTimeSetter, useTimeSetter];\n});\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["useEffect","useState","Input","Counter","translateFromSeconds","useTimeSetter","Countdown","props","isRunning","setIsRunning","isComplete","setIsComplete","time","setTime","inputHours","setInputHours","inputMinutes","setInputMinutes","inputSeconds","setInputSeconds","inputTime","setInputTime","handleClick","value","makeInput","state","setter","relatedSetter","label","e","target","parseInt","i","setInterval","clearInterval"],"sources":["/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Input from '../generic/Input';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport { useTimeSetter } from '../../utils/hooks';\n\nconst Countdown = props => {\n\n    const [isRunning, setIsRunning] = useState(false);\n    const [isComplete, setIsComplete] = useState(true);\n    const [time, setTime] = useState(0);\n    const [inputHours, setInputHours] = useState(0);\n    const [inputMinutes, setInputMinutes] = useState(0);\n    const [inputSeconds, setInputSeconds] = useState(0);\n    const [inputTime, setInputTime] = useState(0);\n\n    const handleClick = value => {\n        switch(value) {\n            case 'Start':\n                setIsRunning(true);\n                setIsComplete(false);\n                break;\n            case 'Pause':\n                setIsRunning(false);\n                break;\n            case 'Resume':\n                setIsRunning(true);\n                break;\n            case 'Fast Forward':\n                setTime(0);\n                setIsComplete(true);\n                break;\n            case 'Reset':\n                setTime(inputTime);\n                setIsComplete(true);\n                setIsRunning(false);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const makeInput = ({state, setter, relatedSetter, label}) => {\n        return <Input label={label} value={state} onChange={e => {\n            if (e.target.value) {\n                setter(parseInt(e.target.value));\n                relatedSetter && relatedSetter(parseInt(e.target.value));\n            } else {\n                setter(0);\n            }\n        }} />\n    };\n\n    // const makeButton = ({value, disabledValue}) => {\n    //     return <Button value={value} disabledValue={inputTime ? disabledValue : true} onClick={handleClick} />\n    // };\n\n    useTimeSetter(setInputTime, inputHours, inputMinutes, inputSeconds);\n    useTimeSetter(setTime, inputHours, inputMinutes, inputSeconds);\n\n    useEffect(() => {\n\n        let i;\n\n        if (isRunning) {\n            i = setInterval(() => {\n                setTime(time - 1);\n            }, 1000);\n            if (time === 0) {\n                clearInterval(i);\n                setIsRunning(false);\n            }\n        }\n\n        return () => clearInterval(i);\n\n    }, [time, inputTime, isRunning]);\n\n    return (\n        <Counter>{translateFromSeconds(time)}</Counter>\n    );\n\n    // return (\n    //     <div style={{ margin: \"10px 0 20px\", display: \"flex\",}}>\n    //         {makeButton({\n    //             value: \"Start\",\n    //             disabledValue: !isComplete || (time !== inputTime)\n    //         })}\n    //         {makeButton({\n    //             value: \"Pause\",\n    //             disabledValue: !isRunning\n    //         })}\n    //         {makeButton({\n    //             value: \"Resume\",\n    //             disabledValue: isRunning || isComplete || (time === 0)\n    //         })}\n    //         {makeButton({\n    //             value: \"Fast Forward\",\n    //             disabledValue: isComplete || (time === 0)\n    //         })}\n    //         {makeButton({\n    //             value: \"Reset\",\n    //             disabledValue: isComplete && (time === inputTime)\n    //         })}\n    //     </div>\n    // );\n};\n\nexport default Countdown;"],"mappings":"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"},"metadata":{},"sourceType":"module"}