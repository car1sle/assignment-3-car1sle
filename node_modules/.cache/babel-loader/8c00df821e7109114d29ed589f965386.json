{"ast":null,"code":"var _jsxFileName = \"/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/XY.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Button from '../generic/Button';\nimport Input from '../generic/Input';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport { useTimeSetter } from '../../utils/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst XY = () => {\n  _s();\n\n  // States for countdown\n  const [isRunning, setIsRunning] = useState(false);\n  const [isComplete, setIsComplete] = useState(true);\n  const [inputIsDisabled, setInputIsDisabled] = useState(false);\n  const [time, setTime] = useState(0);\n  const [inputHours, setInputHours] = useState(0);\n  const [inputMinutes, setInputMinutes] = useState(0);\n  const [inputSeconds, setInputSeconds] = useState(0);\n  const [inputTime, setInputTime] = useState(0); // States for rounds\n\n  const [round, setRound] = useState(1);\n  const [counterRound, setCounterRound] = useState(1);\n  const [inputRounds, setInputRounds] = useState(1);\n\n  const handleClick = value => {\n    switch (value) {\n      case 'Start':\n        setIsRunning(true);\n        setIsComplete(false);\n        setInputIsDisabled(true);\n        break;\n\n      case 'Pause':\n        setIsRunning(false);\n        break;\n\n      case 'Resume':\n        setIsRunning(true);\n        break;\n\n      case 'Fast Forward':\n        setTime(0);\n        setIsRunning(false);\n        setIsComplete(true);\n        setInputIsDisabled(false);\n        setRound(inputRounds);\n        setCounterRound(inputRounds);\n        break;\n\n      case 'Reset':\n        setTime(inputTime);\n        setIsComplete(true);\n        setIsRunning(false);\n        setInputIsDisabled(false);\n        setRound(inputRounds);\n        setCounterRound(1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const makeInput = (state, setter, relatedSetter, label) => {\n    return /*#__PURE__*/_jsxDEV(Input, {\n      label: label,\n      value: state,\n      disabledValue: inputIsDisabled,\n      onChange: e => {\n        if (e.target.value) {\n          setter(parseInt(e.target.value));\n          relatedSetter(parseInt(e.target.value));\n        } else {\n          setter(0);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this);\n  };\n\n  const makeButton = _ref => {\n    let {\n      value,\n      disabledValue\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(Button, {\n      value: value,\n      disabledValue: inputTime ? disabledValue : true,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  };\n\n  useTimeSetter(setInputTime, inputHours, inputMinutes, inputSeconds);\n  useTimeSetter(setTime, inputHours, inputMinutes, inputSeconds);\n  useEffect(() => {\n    let i;\n\n    if (isRunning) {\n      i = setInterval(() => {\n        setTime(time - 1);\n      }, 1000);\n\n      if (time === 0) {\n        if (round === 1) {\n          clearInterval(i);\n          setIsRunning(false);\n        } else {\n          setTime(inputTime);\n          setRound(round - 1);\n          setCounterRound(counterRound + 1);\n        }\n      }\n    }\n\n    return () => clearInterval(i);\n  }, [time, inputTime, isRunning, round, counterRound]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Counter, {\n      children: translateFromSeconds(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"15px 0 20px\",\n        fontStyle: \"italic\"\n      },\n      children: [\"Round \", counterRound, \" of \", inputRounds]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_s(XY, \"BtXIWAxe+BURnPDqVzadVkVL/Qk=\", false, function () {\n  return [useTimeSetter, useTimeSetter];\n});\n\n_c = XY;\nexport default XY;\n\nvar _c;\n\n$RefreshReg$(_c, \"XY\");","map":{"version":3,"names":["useEffect","useState","Button","Input","Counter","translateFromSeconds","useTimeSetter","XY","isRunning","setIsRunning","isComplete","setIsComplete","inputIsDisabled","setInputIsDisabled","time","setTime","inputHours","setInputHours","inputMinutes","setInputMinutes","inputSeconds","setInputSeconds","inputTime","setInputTime","round","setRound","counterRound","setCounterRound","inputRounds","setInputRounds","handleClick","value","makeInput","state","setter","relatedSetter","label","e","target","parseInt","makeButton","disabledValue","i","setInterval","clearInterval","textAlign","margin","fontStyle"],"sources":["/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/XY.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Button from '../generic/Button';\nimport Input from '../generic/Input';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds } from '../../utils/helpers';\nimport { useTimeSetter } from '../../utils/hooks';\n\nconst XY = () => {\n\n    // States for countdown\n    const [isRunning, setIsRunning] = useState(false);\n    const [isComplete, setIsComplete] = useState(true);\n    const [inputIsDisabled, setInputIsDisabled] = useState(false);\n    const [time, setTime] = useState(0);\n    const [inputHours, setInputHours] = useState(0);\n    const [inputMinutes, setInputMinutes] = useState(0);\n    const [inputSeconds, setInputSeconds] = useState(0);\n    const [inputTime, setInputTime] = useState(0);\n    // States for rounds\n    const [round, setRound] = useState(1);\n    const [counterRound, setCounterRound] = useState(1);\n    const [inputRounds, setInputRounds] = useState(1);\n\n    const handleClick = value => {\n        switch(value) {\n            case 'Start':\n                setIsRunning(true);\n                setIsComplete(false);\n                setInputIsDisabled(true);\n                break;\n            case 'Pause':\n                setIsRunning(false);\n                break;\n            case 'Resume':\n                setIsRunning(true);\n                break;\n            case 'Fast Forward':\n                setTime(0);\n                setIsRunning(false);\n                setIsComplete(true);\n                setInputIsDisabled(false);\n                setRound(inputRounds);\n                setCounterRound(inputRounds);\n                break;\n            case 'Reset':\n                setTime(inputTime);\n                setIsComplete(true);\n                setIsRunning(false);\n                setInputIsDisabled(false);\n                setRound(inputRounds);\n                setCounterRound(1);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const makeInput = (state, setter, relatedSetter, label) => {\n        return <Input label={label} value={state} disabledValue={inputIsDisabled} onChange={e => {\n            if (e.target.value) {\n                setter(parseInt(e.target.value));\n                relatedSetter(parseInt(e.target.value));\n            } else {\n                setter(0);\n            }\n        }} />\n    };\n\n    const makeButton = ({value, disabledValue}) => {\n        return <Button value={value} disabledValue={inputTime ? disabledValue : true} onClick={handleClick} />\n    };\n\n    useTimeSetter(setInputTime, inputHours, inputMinutes, inputSeconds);\n    useTimeSetter(setTime, inputHours, inputMinutes, inputSeconds);\n\n    useEffect(() => {\n\n        let i;\n\n        if (isRunning) {\n            i = setInterval(() => {\n                setTime(time - 1);\n            }, 1000);\n            if (time === 0) {\n                if (round === 1) {\n                    clearInterval(i);\n                    setIsRunning(false);\n                } else {\n                    setTime(inputTime);\n                    setRound(round - 1);\n                    setCounterRound(counterRound + 1);\n                }\n            }\n        }\n\n        return () => clearInterval(i);\n\n    }, [time, inputTime, isRunning, round, counterRound ]);\n\n    return (\n        <div style={{ textAlign: \"center\",}}>\n            <Counter>{translateFromSeconds(time)}</Counter>\n            <div style={{ margin: \"15px 0 20px\", fontStyle: \"italic\",}}>Round {counterRound} of {inputRounds}</div>\n            {/* <div style={{ margin: \"10px 0 20px\", display: \"flex\",}}>\n                {makeButton({\n                    value: \"Start\",\n                    disabledValue: !isComplete || (time === 0)\n                })}\n                {makeButton({\n                    value: \"Pause\",\n                    disabledValue: !isRunning\n                })}\n                {makeButton({\n                    value: \"Resume\",\n                    disabledValue: isRunning || isComplete || (time === 0)\n                })}\n                {makeButton({\n                    value: \"Fast Forward\",\n                    disabledValue: isComplete || (time === 0)\n                })}\n                {makeButton({\n                    value: \"Reset\",\n                    disabledValue: isComplete && (time === inputTime)\n                })}\n            </div> */}\n            {/* <div style={{ margin: \"0 0 10px\",display: \"flex\", justifyContent: \"center\", alignItems: \"center\",}}>\n                <div style={{ width: \"135px\", textAlign: \"right\"}}>Set workout time:</div>\n                {makeInput(inputHours, setInputHours, setTime, \"H\")}\n                {makeInput(inputMinutes, setInputMinutes, setTime, \"M\")}\n                {makeInput(inputSeconds, setInputSeconds, setTime, \"S\")}\n            </div>\n            <div style={{ margin: \"0 0 10px\",}}>Set number of rounds: {makeInput(inputRounds, setInputRounds, setRound, \"R\")}</div> */}\n        </div>\n    );\n};\n\nexport default XY;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}