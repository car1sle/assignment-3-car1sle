{"ast":null,"code":"var _jsxFileName = \"/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds, translateToSeconds } from '../../utils/helpers'; // const usePrevious = value => {\n//     const previous = useRef(0);\n//     useEffect(() => {\n//       previous.current = value;\n//     }, [value]);\n//     return previous.current;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  timers,\n  workoutIsRunning,\n  currentTimerId,\n  setCurrentTimerId,\n  setWorkoutIsComplete\n} = useContext(AppContext);\nconst {\n  id,\n  inputHours,\n  inputMinutes,\n  inputSeconds\n} = props;\nconst [time, setTime] = useState(translateToSeconds(inputHours, inputMinutes, inputSeconds));\nconst [isRunning, setIsRunning] = useState(workoutIsRunning);\n\nconst Countdown = _ref => {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  // const prevTime = usePrevious(time);\n  useEffect(() => {\n    let i;\n\n    if (isRunning && currentTimerId === id) {\n      i = setInterval(() => {\n        setTime(time - 1);\n      }, 1000);\n\n      if (time === 0) {\n        clearInterval(i);\n        setIsRunning(false);\n\n        if (id < timers.length) {\n          setCurrentTimerId(currentTimerId + 1);\n        }\n      }\n    }\n\n    return () => {\n      clearInterval(i);\n\n      if (id === timers.length) {\n        setWorkoutIsComplete(true);\n      }\n    };\n  }, [time, isRunning, currentTimerId, id, setCurrentTimerId, timers, setWorkoutIsComplete]);\n  const displayTime = id < currentTimerId ? '00:00:00' : translateFromSeconds(time);\n  return /*#__PURE__*/_jsxDEV(Counter, {\n    children: displayTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Countdown, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["useEffect","useState","useContext","useRef","AppContext","Counter","translateFromSeconds","translateToSeconds","timers","workoutIsRunning","currentTimerId","setCurrentTimerId","setWorkoutIsComplete","id","inputHours","inputMinutes","inputSeconds","props","time","setTime","isRunning","setIsRunning","Countdown","i","setInterval","clearInterval","length","displayTime"],"sources":["/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-2-car1sle/src/components/timers/Countdown.js"],"sourcesContent":["import { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from '../../AppProvider';\nimport Counter from '../generic/Counter';\nimport { translateFromSeconds, translateToSeconds } from '../../utils/helpers';\n\n// const usePrevious = value => {\n//     const previous = useRef(0);\n  \n//     useEffect(() => {\n//       previous.current = value;\n//     }, [value]);\n  \n//     return previous.current;\n// };\n\nconst { timers, workoutIsRunning, currentTimerId, setCurrentTimerId, setWorkoutIsComplete } = useContext(AppContext);\nconst { id, inputHours, inputMinutes, inputSeconds } = props;\n\nconst [time, setTime] = useState(translateToSeconds(inputHours, inputMinutes, inputSeconds));\nconst [isRunning, setIsRunning] = useState(workoutIsRunning);\n\nconst Countdown = ({props}) => {\n\n    // const prevTime = usePrevious(time);\n\n    useEffect(() => {\n\n        let i;\n\n        if (isRunning && currentTimerId === id) {\n            i = setInterval(() => {\n                setTime(time - 1);\n            }, 1000);\n            if (time === 0) {\n                clearInterval(i);\n                setIsRunning(false);\n                if (id < timers.length) {\n                    setCurrentTimerId(currentTimerId + 1);\n                }\n            }\n        }\n\n        return () => {\n            clearInterval(i);\n            if (id === timers.length) {\n                setWorkoutIsComplete(true);\n            }\n        }\n\n    }, [time, isRunning, currentTimerId, id, setCurrentTimerId, timers, setWorkoutIsComplete]);\n\n    const displayTime = (id < currentTimerId) ? '00:00:00' : translateFromSeconds(time);\n\n    return (\n\n        <Counter>{displayTime}</Counter>\n    );\n\n};\n\nexport default Countdown;"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,qBAAzD,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA,MAAM;EAAEC,MAAF;EAAUC,gBAAV;EAA4BC,cAA5B;EAA4CC,iBAA5C;EAA+DC;AAA/D,IAAwFV,UAAU,CAACE,UAAD,CAAxG;AACA,MAAM;EAAES,EAAF;EAAMC,UAAN;EAAkBC,YAAlB;EAAgCC;AAAhC,IAAiDC,KAAvD;AAEA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAACM,kBAAkB,CAACO,UAAD,EAAaC,YAAb,EAA2BC,YAA3B,CAAnB,CAAhC;AACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAACQ,gBAAD,CAA1C;;AAEA,MAAMa,SAAS,GAAG,QAAa;EAAA;;EAAA,IAAZ;IAACL;EAAD,CAAY;EAE3B;EAEAjB,SAAS,CAAC,MAAM;IAEZ,IAAIuB,CAAJ;;IAEA,IAAIH,SAAS,IAAIV,cAAc,KAAKG,EAApC,EAAwC;MACpCU,CAAC,GAAGC,WAAW,CAAC,MAAM;QAClBL,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;MACH,CAFc,EAEZ,IAFY,CAAf;;MAGA,IAAIA,IAAI,KAAK,CAAb,EAAgB;QACZO,aAAa,CAACF,CAAD,CAAb;QACAF,YAAY,CAAC,KAAD,CAAZ;;QACA,IAAIR,EAAE,GAAGL,MAAM,CAACkB,MAAhB,EAAwB;UACpBf,iBAAiB,CAACD,cAAc,GAAG,CAAlB,CAAjB;QACH;MACJ;IACJ;;IAED,OAAO,MAAM;MACTe,aAAa,CAACF,CAAD,CAAb;;MACA,IAAIV,EAAE,KAAKL,MAAM,CAACkB,MAAlB,EAA0B;QACtBd,oBAAoB,CAAC,IAAD,CAApB;MACH;IACJ,CALD;EAOH,CAxBQ,EAwBN,CAACM,IAAD,EAAOE,SAAP,EAAkBV,cAAlB,EAAkCG,EAAlC,EAAsCF,iBAAtC,EAAyDH,MAAzD,EAAiEI,oBAAjE,CAxBM,CAAT;EA0BA,MAAMe,WAAW,GAAId,EAAE,GAAGH,cAAN,GAAwB,UAAxB,GAAqCJ,oBAAoB,CAACY,IAAD,CAA7E;EAEA,oBAEI,QAAC,OAAD;IAAA,UAAUS;EAAV;IAAA;IAAA;IAAA;EAAA,QAFJ;AAKH,CArCD;;GAAML,S;;KAAAA,S;AAuCN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}