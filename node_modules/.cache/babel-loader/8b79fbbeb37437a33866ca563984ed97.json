{"ast":null,"code":"var _jsxFileName = \"/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-1-car1sle/src/components/timers/Stopwatch.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Button from '../generic/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Stopwatch = () => {\n  _s();\n\n  const [time, setTime] = useState(0);\n  const [inputTime, setInputTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isComplete, setIsComplete] = useState(true);\n\n  const handleClick = (e, isRunning, value) => {\n    setIsRunning(isRunning);\n\n    if (value === \"Start\") {\n      setIsComplete(false);\n    } else if (value === \"Pause\") {\n      setIsPaused(true);\n    } else if (value === \"Resume\") {\n      setIsPaused(false);\n    } else if (value === 'Fast Forward') {\n      setTime(inputTime);\n    } else if (value === 'Reset') {\n      setTime(0);\n    }\n  };\n\n  useEffect(() => {\n    let i;\n\n    if (isRunning) {\n      i = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n\n      if (time >= inputTime) {\n        clearInterval(i);\n        setIsRunning(false);\n      }\n    }\n\n    return () => clearInterval(i);\n  }, [time, inputTime, isRunning]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), \"Count to \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      defaultValue: inputTime,\n      onChange: e => {\n        setInputTime(parseInt(e.target.value));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 22\n    }, this), \" seconds\", /*#__PURE__*/_jsxDEV(Button, {\n      value: \"Start\",\n      disabledValue: !inputTime || isRunning ? true : false,\n      onClick: handleClick,\n      setIsRunning: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      value: \"Pause\",\n      disabledValue: !isRunning,\n      onClick: handleClick,\n      setIsRunning: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      value: \"Resume\",\n      disabledValue: !isRunning && isPaused ? false : true,\n      onClick: handleClick,\n      setIsRunning: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      value: \"Fast Forward\",\n      onClick: handleClick,\n      setIsRunning: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      value: \"Reset\",\n      onClick: handleClick,\n      setIsRunning: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Stopwatch, \"aHS+Ka7B3gnxD9vgF9Ei7uH1eKQ=\");\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["useEffect","useState","Button","Stopwatch","time","setTime","inputTime","setInputTime","isRunning","setIsRunning","isPaused","setIsPaused","isComplete","setIsComplete","handleClick","e","value","i","setInterval","clearInterval","parseInt","target"],"sources":["/Users/carlyciricillo/Documents/HES/Design Principles in React/assignment-1-car1sle/src/components/timers/Stopwatch.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Button from '../generic/Button';\n\nconst Stopwatch = () => {\n\n    const [time, setTime] = useState(0);\n    const [inputTime, setInputTime] = useState(0);\n    const [isRunning, setIsRunning] = useState(false);\n    const [isPaused, setIsPaused] = useState(false);\n    const [isComplete, setIsComplete] = useState(true);\n\n    const handleClick = (e, isRunning, value) => {\n        setIsRunning(isRunning);\n        if (value === \"Start\") {\n            setIsComplete(false);\n        } else if (value === \"Pause\") {\n            setIsPaused(true);\n        } else if (value === \"Resume\") {\n            setIsPaused(false);\n        } else if (value === 'Fast Forward') {\n            setTime(inputTime);\n        } else if (value === 'Reset') {\n            setTime(0);\n        }\n    }\n\n    useEffect(() => {\n\n        let i;\n\n        if (isRunning) {\n            i = setInterval(() => {\n                setTime(time + 1);\n            }, 1000);\n            if (time >= inputTime) {\n                clearInterval(i);\n                setIsRunning(false);\n            }\n        }\n\n        return () => clearInterval(i);\n\n    }, [time, inputTime, isRunning]);\n\n    return (\n        <>\n            <div>{time}</div>\n            Count to <input type=\"number\" defaultValue={inputTime} onChange={e => {setInputTime(parseInt(e.target.value));}} /> seconds\n            <Button value=\"Start\" disabledValue={(!inputTime || isRunning) ? true : false} onClick={handleClick} setIsRunning={true} />\n            <Button value=\"Pause\" disabledValue={!isRunning} onClick={handleClick} setIsRunning={false} />\n            <Button value=\"Resume\" disabledValue={(!isRunning && isPaused) ? false : true} onClick={handleClick} setIsRunning={true} />\n            <Button value=\"Fast Forward\" onClick={handleClick} setIsRunning={false} />\n            <Button value=\"Reset\" onClick={handleClick} setIsRunning={false} />\n        </>\n    );\n};\n\nexport default Stopwatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}